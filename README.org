#+TITLE: passable
#+DESCRIPTION: A password store for teams, built on libsodium (NOT READY FOR REAL-WORLD)

*passable* is a password store for development teams featuring authenticated encryption, security groups and audit trails. It is built with libsodium, so you can rest assured that there are /some/ mistakes this author hasn't made.

*This is /alpha/ software. Don't use it for your real secrets.*

* Usage
  
In the examples below, angle brackets denote a parameter for you to provide. Square brackets indicate that a parameter is optional and has a default value as shown.

** Basic
1. Generate yourself a nice public and secret-key pair. Choose a password to encrypt your secret-key. The keypair will be saved in =$HOME/.passable=. Be sure not to lose the secret-key or forget your password.
   
: passable keypair [<username> = $USER]

It will ask for your password.

2. Initialize an empty store. It's just a file.

: passable init [<path> = $(pwd)/passable_store]

3. Put some credentials in it. You will be asked for the username, password, and any secret notes or files.

: passable put <title> [<url>]

=put= will also update existing credentials.

4. Try retrieving those credentials. You will be asked for the password to decrypt your secret-key.

: passable get <title>

If you haven't forgotten your secret-key password in the last few minutes, you should be rewarded with the credential password you entered just now.

You can also view all the details of a given credential.

: passable show <title>

Or, you can list all the credentials you have access to.

: passable ls

=ls= will only show the titles and urls in this view, not passwords.

** Groups
1. Create a group.

: passable group <name>

2. Add your friend to the group.

: passable join <user> <group>

3. Give the group access to some credentials.

: passable grant <group> <title>

4. List the credentials the group has access to.

: passable ls <group>

5. Kick your treacherous friend out of the group.

: passable kick <group> <user>

The group's access keys will be re-encrypted, so your friend can no longer =get=, =show= or =ls= those credentials.

However you still need to make a note of what passwords the users may have seen and change those. That's what =ls= is for.

* History
   
Passable also maintains a full Git repository so that you can read the logs and rollback as needed. You can also add remotes and push/pull changes.
